Why we used (a lot of) Go at our Python shop
& Why it isn't your holy grail

Piyush Verma,
Software Consultant
@meson10
me@meson10.net

* Early years and Challenges

* C++ experience (2007 - 2008)

Started off as a C++ programmer, contributing to KDevelop4.

I had fairly weak programming concepts & C++ was overwhelming.

I would get stuff done, but then I had a real hard time.
(If I look back I have no clue what & how I did it)

When you have weak concepts, it's easy to write your own code;
But takes ages to understand others'

In my defence, the language had a huge contribution too.
(Unreadable, namespaces, boost is unboost, STL is inconsistent & ...)

#*Score:* Programming Skills 1 - 0 Productivity

* Found Python, Flourished

* Salient Features (advantages?) (2007- 2011)

Easy to pick up. First push to production in less than 15 days.

Absolutely human readable code.

Dynamically typed (could make my mistakes)

Time to translate a thought to main.py is less than it took me to write this Slide.

Memory management: It is Automagical. Decent Garbage Collector, abstracts the use of heap vs stack.

Because its interpreted it allows development in interactive shells, for rocket speed prototyping.

#*Score:* Programming Skills 2 - 2 Productivity

* Issues are directly proportional to your growth in Business.

* Mid term challenges (2011-2012)

As no. of requests went up, it demanded scaling.

Conventional stack crashed twice at a big launch.

Daily bugs reported by users.

Unicode was an uphill challenge to handle, more so as team and codebase was growing.

Limited QA budget worsened the woes.

Limited budget also meant we aim at utilizing given resources to the fullest than just keep adding new servers.

Server costs started touching $2500 per month.

Shipping code updates would lead to complex deployments.

Running different versions of our own software was proving tough.

* Backed by experiences we started looking for alternatives.

* Expectations (2012-)

Should have a fairly low learning curve.

Stability and community support is essential.

As much as possible, should be a drop-in replacement.

Strictly static typed.

Speed of development should be as fast as python.

Deployments and dependency management should be easier.

Have inbuilt support for Concurrency.

Should not fall apart while dealing with Unicodes.

With all these considerations, language should be faster than what we were using already.

* Choices

Golang

Haskell

Scala

Java

Rust

* Based on our choices and requirements, We picked Go.

* Experiences with Go (2012-present)

The team picked it up within a matter of two weeks.

Authored Gottp (http://github.com/Simversity/gottp), a microservice framework that powered most of our backend services thereafter.

Strong typing would not let developers compile bad code.

Shipping source code is as easy as shipping binaries.

Maintain different versions of the binary in a private S3.

No more variations in dependencies in production environment.

Didn't have to deal with virtualenvs or creating an environment.

Unicode handled as-it-is. No more Emojis crashing the server.

Monthly bills dropped to ~ $850 for the level of concurrency we could achieve with lesser hardware.

Very Comprehensive standard library.

Goroutines, Channels & interfaces are salient and really smooth features of Golang.

Very good inbuilt testing support with the Testing package

* Contd...

Quickly became the choice for:

  - Complex migration scripts.
  - Backend servers.
  - Micro services.
  - Database Oplog parsers.

* If you do not read the FAQ exhaustively and compare it with what you need, you can hit these Surprises (2012-present)

* Confusing type system

- Named Type is different from Unnamed Type.
- Variable of Named Type is assignable to variable of Unnamed Type, vice versa.
- Variable of different Named Type is not assignable to each other.

  type MyInt int
  type MySlice []int

While this is invalid

  var i int = 2
  var i2 MyInt = 4
  i = i2

This is not

  custom := make([]int)
  func checkSlice(input MySlice){...}
  checkSlice(custom)

* Language extensibility

- Operators are not functions
- Inbuilt functions can never be extended, reused

  //Cannot create a custom iterator
  class NewIter:
      def __init__(self):
          self.nodes = []

      def append(self, val):
          self.nodes.append(val)

      def __iter__(self):
          for elem in self.nodes:
              yield elem

      def __add__(self, item):
          temp_iter = NewIter()
          for elem in self:
              temp_iter.append(elem)
          for elem in item:
              temp_iter.append(elem)
          return temp_iter


* OR this:

  type MyStr string
  func main() {
    var z string = "Oh!"
    var x MyStr = "hello"

    fmt.Println(x + z)
  }

- No parametric polymorphism [Generics]

- Surprising Casting

  //Valid
  func hello() interface{} {
    return 1
  }

  //Invalid
  func hello_array() []interface{} {
    return []int{1,2,3}
  }

* Rely on interface{} too much, Such implementations will still happen

  type LinkedList struct {
    value interface{} //Make this an interface again and have to down-cast.
    next  *LinkedList
  }

  func (oldNode *LinkedList) prepend(value interface{}) *LinkedList {
    return &LinkedList{value, oldNode}
  }

  func tail(value interface{}) *LinkedList {
    return &LinkedList{value, nil}
  }

  func traverse(ll *LinkedList) {
    if ll == nil {
      return
    }
    traverse(ll.next)
  }

  func main() {
    node2 := tail(5).prepend("Hello").prepend([]byte{1, 2, 3, 4})
    traverse(node2) //[1 2 3 4] Hello 5
  }

* No compount statements

  a = 1
  b = 3
  x = a if a < b else a+1

Will have to be written like this

	  a, b := 1, 3
	  c := (map[bool]int{true: a, false: a + 1})[a < b]

There is no stack-only mode.

* So wait, what's the Conclusion?

* Deal with it, know what you want.

You would see a lot of articles on golang about the languages doesn't have this or that.

I admit, the language does not have generics and that can lead to too much verbose code writing or having to use reflection.

Well, we do those because we want to deal with those things.

The FAQ of the language answers most of why it does not support a few features.

Know your requirements, understand the limitations or conventions, and if you go ahead with it deal with it.

There is always an explicit, verbose and simpler way around it, and that matches the *Zen of python*
